{
    "index_file_content": "import { app } from \"./app.js\"\nimport connectDB from \"./db/index.js\"\nimport dotenv from \"dotenv\"\n\ndotenv.config({path: './env'})\nconnectDB().then(()=> {\n    app.listen(process.env.PORT || 8000,()=> {\n        console.log(`Server is running at: http://localhost:8000`)\n    })\n\n    app.on(\"error\",(error) => {\n        console.log(\"ERROR: \",error);\n        throw error\n    })\n}).catch((err)=>{\n    console.log(\"MONGO DB error failed.\");\n})",

    "app_file_content": "import express from \"express\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\nimport userRouter from \"./routes/user.routes.js\";\n\nconst app = express();\n\napp.use(cors({\n    origin: process.env.CORS_ORIGIN,\n    credentials: true\n}));\n\n// getting data in form of json with limit up to 16kb.\napp.use(express.json({ limit: \"16kb\" }));\n// configuring express to get data from URL as well and extended option is for getting objects inside objects.\napp.use(express.urlencoded({ extended: true, limit: \"16kb\" }));\napp.use(express.static(\"public\"));\napp.use(cookieParser());\n\napp.use(\"/api/v1/users\", userRouter);\n\n// route 1\n\nexport { app };",

    "env_file_content" : "MONGO_URI=YOUR_MONOGO_URI\nPORT=PORT_NUMBER\nACCESS_TOKEN_SECRET=YOUR_AC_SECRET\nACCESS_TOKEN_EXPIRY=1d\nREFRESH_TOKEN_SECRET=YOUR_RF_SECRET\nREFRESH_TOKEN_EXPIRY=10d\nCLOUDINARY_CLOUD_NAME=YOUR_CLOUD_NAME\nCLOUDINARY_API_SECRET=YOUR_API_SECRET",

    "apiResponse_file_content" : "class ApiResponse {\n\tconstructor(statusCode, data, message = 'success') {\n\t\tthis.statusCode = statusCode\n\t\tthis.data = data\n\t\tthis.message = message\n\t\tthis.success = statusCode < 400\n\t}\n}\nexport {ApiResponse}",

    "db_file_content" : "import mongoose from 'mongoose';\n\nconst connectToMongoDB = async (mongoURI) => {\n    try {\n        await mongoose.connect(mongoURI);\n        console.log('Successfully connected to MongoDB!');\n    } catch (error) {\n        console.error(`Error connecting to MongoDB: ${error.message}`);\n    }\n};\n\nexport default connectToMongoDB;",

    "user_model_content" : "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  fullName: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true,\n    index: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    trim: true,\n    lowercase: true,\n    index: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  coverImage: {\n    type: String,\n    default: 'default_cover.jpg'\n  },\n  avatar: {\n    type: String,\n    required: true\n  },\n  phoneNumber: {\n    type: String,\n    trim: true\n  },\n  bio: {\n    type: String,\n    maxlength: 500\n  },\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  isActive: {\n    type: Boolean,\n    default: true\n  },\n  address: {\n    street: {\n      type: String,\n      trim: true\n    },\n    city: {\n      type: String,\n      trim: true\n    },\n    state: {\n      type: String,\n      trim: true\n    },\n    country: {\n      type: String,\n      trim: true\n    },\n    zipCode: {\n      type: String,\n      trim: true\n    }\n  },\n  socialProfiles: {\n    facebook: {\n      type: String,\n      trim: true\n    },\n    twitter: {\n      type: String,\n      trim: true\n    },\n    linkedIn: {\n      type: String,\n      trim: true\n    },\n    instagram: {\n      type: String,\n      trim: true\n    }\n  },\n  posts: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Post'\n  }]\n}, {\n  timestamps: true\n});\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;",

    "post_model_content": "const mongoose = require('mongoose');\n\nconst postSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  photos: [String],\n  createdBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  comments: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  }],\n  likes: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }],\n  tags: [String],\n  location: {\n    type: String,\n    trim: true\n  },\n  isPublished: {\n    type: Boolean,\n    default: false\n  },\n  viewCount: {\n    type: Number,\n    default: 0\n  },\n  shares: {\n    type: Number,\n    default: 0\n  }\n}, {\n  timestamps: true\n});\n\nconst Post = mongoose.model('Post', postSchema);\n\nmodule.exports = Post;",

    "productCatalog_model_content": "const mongoose = require('mongoose');\n\nconst productCatalogSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  price: {\n    type: Number,\n    required: true\n  },\n  category: {\n    type: String,\n    required: true\n  },\n  quantity: {\n    type: Number,\n    required: true,\n    default: 0\n  },\n  images: [{\n    type: String,\n    required: true\n  }],\n  ratings: [{\n    type: Number,\n    min: 1,\n    max: 5\n  }]\n}, { timestamps: true });\n\nconst ProductCatalog = mongoose.model('ProductCatalog', productCatalogSchema);\n\nmodule.exports = ProductCatalog;",

    "messaging_model_content": "const mongoose = require('mongoose');\n\nconst messageSchema = new mongoose.Schema({\n  sender: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  receiver: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  message: {\n    type: String,\n    required: true\n  },\n  isRead: {\n    type: Boolean,\n    default: false\n  },\n  attachments: [{\n    type: String\n  }]\n}, { timestamps: true });\n\nconst Message = mongoose.model('Message', messageSchema);\n\nmodule.exports = Message;",

    "eventScheduling_model_content": "const mongoose = require('mongoose');\n\nconst eventSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  date: {\n    type: Date,\n    required: true\n  },\n  location: {\n    type: String,\n    required: true\n  },\n  organizer: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  participants: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }]\n}, { timestamps: true });\n\nconst Event = mongoose.model('Event', eventSchema);\n\nmodule.exports = Event;",

    "locationBased_model_content": "const mongoose = require('mongoose');\n\nconst locationSchema = new mongoose.Schema({\n  latitude: {\n    type: Number,\n    required: true\n  },\n  longitude: {\n    type: Number,\n    required: true\n  },\n  address: {\n    type: String,\n    required: true\n  },\n  city: {\n    type: String,\n    required: true\n  },\n  country: {\n    type: String,\n    required: true\n  }\n}, { timestamps: true });\n\nconst Location = mongoose.model('Location', locationSchema);\n\nmodule.exports = Location;",

    "contentManagement_model_content": "const mongoose = require('mongoose');\n\nconst contentSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  author: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  tags: [{\n    type: String\n  }],\n  likes: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }],\n  comments: [{\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User'\n    },\n    comment: {\n      type: String,\n      required: true\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now\n    }\n  }]\n}, { timestamps: true });\n\nconst Content = mongoose.model('Content', contentSchema);\n\nmodule.exports = Content;",

    "financialTransaction_model_content": "const mongoose = require('mongoose');\n\nconst transactionSchema = new mongoose.Schema({\n  amount: {\n    type: Number,\n    required: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  sender: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  receiver: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'completed', 'cancelled'],\n    default: 'pending'\n  }\n}, { timestamps: true });\n\nconst FinancialTransaction = mongoose.model('FinancialTransaction', transactionSchema);\n\nmodule.exports = FinancialTransaction;",

    "analytics_model_content": "const mongoose = require('mongoose');\n\nconst analyticsSchema = new mongoose.Schema({\n  data: {\n    type: Object,\n    required: true\n  },\n  eventType: {\n    type: String,\n    required: true\n  },\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  device: {\n    type: String,\n    required: true\n  },\n  browser: {\n    type: String,\n    required: true\n  },\n  ipAddress: {\n    type: String,\n    required: true\n  },\n  location: {\n    type: String,\n    required: true\n  },\n  platform: {\n    type: String,\n    required: true\n  },\n  timestamp: {\n    type: Date,\n    default: Date.now\n  }\n}, { timestamps: true });\n\nconst Analytics = mongoose.model('Analytics', analyticsSchema);\n\nmodule.exports = Analytics;",

    "socialNetwork_model_content": "const mongoose = require('mongoose');\n\nconst socialNetworkSchema = new mongoose.Schema({\n  user1: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  user2: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'accepted', 'rejected'],\n    default: 'pending'\n  },\n  actionBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  },\n  message: {\n    type: String\n  },\n  lastInteractionAt: {\n    type: Date,\n    default: Date.now\n  }\n}, { timestamps: true });\n\nconst SocialNetwork = mongoose.model('SocialNetwork', socialNetworkSchema);\n\nmodule.exports = SocialNetwork;",

    "poll_model_content": "const mongoose = require('mongoose');\n\nconst pollOptionSchema = new mongoose.Schema({\n  optionText: {\n    type: String,\n    required: true\n  },\n  votes: {\n    type: Number,\n    default: 0\n  }\n});\n\nconst pollSchema = new mongoose.Schema({\n  question: {\n    type: String,\n    required: true\n  },\n  options: [pollOptionSchema],\n  creator: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  voters: [{\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User'\n  }]\n}, { timestamps: true });\n\nconst Poll = mongoose.model('Poll', pollSchema);\n\nmodule.exports = Poll;",

    "notification_model_content": "const mongoose = require('mongoose');\n\nconst notificationSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  read: {\n    type: Boolean,\n    default: false\n  }\n}, { timestamps: true });\n\nconst Notification = mongoose.model('Notification', notificationSchema);\n\nmodule.exports = Notification;",

    "product_review_model_content": "const mongoose = require('mongoose');\n\nconst productReviewSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true\n  },\n  product: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Product',\n    required: true\n  },\n  rating: {\n    type: Number,\n    min: 1,\n    max: 5,\n    required: true\n  },\n  reviewText: {\n    type: String,\n    required: true\n  }\n}, { timestamps: true });\n\nconst ProductReview = mongoose.model('ProductReview', productReviewSchema);\n\nmodule.exports = ProductReview;"
}
